<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<# 
GenerateClasses(); 
#>
<#+

void GenerateClasses()
{
    WriteLine("// ===========================================================================");
    WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
    WriteLine("// ===========================================================================");
    WriteLine("");
    WriteLine("using System;");

    WriteLine("");
    WriteLine("namespace OneOf.Tests");
    using (new WriteIndent(this))
    {
        WriteLine("public abstract class PerfFakeBase");
        using (new WriteIndent(this))
        {
			WriteLine("protected static readonly Random Ran = new Random();");
            WriteLine("public FakeType Type { get; private set; }");
            WriteLine("protected PerfFakeBase(FakeType type = FakeType.Base)");
            using (new WriteIndent(this))
            {
                WriteLine("Type = type;");
            }
        }

        WriteLine("public enum FakeType");
        using (new WriteIndent(this))
        {
            WriteLine("Base = 0,");
            WriteLine("One = 1,");
            WriteLine("Two = 2,");
            WriteLine("Three = 3,");
            WriteLine("Four = 4,");
            WriteLine("Five = 5,");
            WriteLine("Six = 6");
        }
		var ran = new Random();
        var allButBase = Enum.GetValues(typeof(FakeType)).Cast<FakeType>().Skip(1).ToList();
        foreach (var ft in allButBase)
        {
            var name = Enum.GetName(typeof(FakeType), ft);

            WriteLine($"public class {name} : PerfFakeBase");
            using (new WriteIndent(this))
            {
                WriteLine($"public {name}() : base(FakeType.{name}){{}}");
				WriteLine($"public string {name}Prop {{ get; set; }} = Ran.NextDouble().ToString();");
            }
        }

        var oneofType = "OneOf<PerfFakeBase," + string.Join(",", allButBase.Take(4)) + ">";
        WriteLine("public static class PerfOneOfs");
        using (new WriteIndent(this))
        {
            foreach (var ft in allButBase)
            {
				var name = Enum.GetName(typeof(FakeType), ft);
				WriteLine($"public static {oneofType} {name} = new {name}();");
            }
        }
    }
}

class WriteIndent: IDisposable
{
	TextTransformation textTransformation;

	public WriteIndent(TextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}
    public enum FakeType
    {
        Base = 0,
        One = 1,
        Two = 2,
        Three = 3,
        Four = 4,
        Five = 5,
        Six = 6
    }
#>
