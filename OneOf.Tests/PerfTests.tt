<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<# 
    GenerateClasses(); 
#>
<#+

    void GenerateClasses()
    {
        var testNames = Enumerable.Range(0,6).Select(i => "T" + i).ToList();
        var fakeNames = new []{"One","Two","Three","Four","Five","Six"};
        var letters= new []{"a","b","c","d","e","f"};

        WriteLine("// ===========================================================================");
        WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
        WriteLine("// ===========================================================================");
        WriteLine("");
        WriteLine("﻿using System;");
        WriteLine("using System.Linq;");
        WriteLine("using NBench;");
        WriteLine("using NUnit.Framework;");
        WriteLine("// ReSharper disable UnusedMember.Global - test classes are obviously not instantiated by reference.");
        WriteLine("// ReSharper disable UnusedParameter.Global - having BenchmarkContext in the signature slightly improves performance of testing.");

        WriteLine("namespace OneOf.Tests");
        using(Indent)
        {
            WriteLine("public static class MatcherPerformanceTests");
            using(Indent)
            {
                WriteLine("private static void WarmUpHelper()");
                using(Indent)
                {
                    for(var i = 0; i < 6; i++)
                    {     
                        WriteLine($"var {letters[i]} = new {fakeNames[i]}();");
                        for(var c = 0; c < 6; c++)
                        {    
                            WriteLine($"{testNames[i]}.Func(new {fakeNames[i]}());");
                        }
                        WriteLine("");
                    }
                }
                for(var i = 0; i < 6; i++)
                {            
                    WriteLine("[Category(\"Performance\")]");
                    WriteLine($"public class {testNames[i]} : PerfTest<{testNames[i]}>");
                    using(Indent)
{
                        WriteLine($"[OneTimeSetUp]");
                        WriteLine($"public void OneTimeSetUp()");
                        using(Indent)
                        {
                            WriteLine("WarmUpHelper();");
                        }
                        
                        WriteLine("public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)");
                        using(Indent)
                        {
                            WriteLine("return oo");
                            WriteLine(".Match(o => o.OneProp)");
                            WriteLine(".Match(tw => tw.TwoProp)");
                            WriteLine(".Match(th => th.ThreeProp)");
                            WriteLine(".Match(f => f.FourProp).");
                            WriteLine("Match(b => b.Type.ToString());");
                        }

                        WriteLine("private Counter _counter;");

                        WriteLine("[PerfSetup]");
                        WriteLine("public void PerfSetup(BenchmarkContext context)");
                        using(Indent)
                        {
                            WriteLine("_counter = context.GetCounter(\"TestCounter\");");
                        }

                        WriteLine("");
                        WriteLine("[PerfBenchmark(Description = \"Test performance of Matching.\", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]");
                        WriteLine("[CounterTotalAssertion(\"TestCounter\", MustBe.GreaterThanOrEqualTo, 0)]");
                        WriteLine("[MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]");
                        WriteLine("[GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]");
                        WriteLine("public void Benchmark1(BenchmarkContext c)");
                        using(Indent)
                        {
                            WriteLine($"Func(PerfOneOfs.{fakeNames[i]});");
                            WriteLine("_counter.Increment();");
                        }
                    }

                }
            }   
        }   
    }         



class WriteIndent: IDisposable
{
	TextTransformation textTransformation;

	public WriteIndent(TextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}
    WriteIndent Indent {get{return new WriteIndent(this);}}
    public enum FakeType
    {
        Base = 0,
        One = 1,
        Two = 2,
        Three = 3,
        Four = 4,
        Five = 5,
        Six = 6
    }
#>
