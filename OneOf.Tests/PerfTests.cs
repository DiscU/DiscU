// ===========================================================================
// Generated by PerfTests.tt
// ===========================================================================

﻿using System;
using System.Linq;
using NBench;
using NUnit.Framework;
// ReSharper disable UnusedMember.Global - test classes are obviously not instantiated by reference.
// ReSharper disable UnusedParameter.Global - having BenchmarkContext in the signature slightly improves performance of testing.
namespace OneOf.Tests
{
    public static class MatcherPerformanceTests
    {
        private static void WarmUpHelper()
        {
            var a = new One();
            T0.Func(new One());
            T0.Func(new One());
            T0.Func(new One());
            T0.Func(new One());
            T0.Func(new One());
            T0.Func(new One());

            var b = new Two();
            T1.Func(new Two());
            T1.Func(new Two());
            T1.Func(new Two());
            T1.Func(new Two());
            T1.Func(new Two());
            T1.Func(new Two());

            var c = new Three();
            T2.Func(new Three());
            T2.Func(new Three());
            T2.Func(new Three());
            T2.Func(new Three());
            T2.Func(new Three());
            T2.Func(new Three());

            var d = new Four();
            T3.Func(new Four());
            T3.Func(new Four());
            T3.Func(new Four());
            T3.Func(new Four());
            T3.Func(new Four());
            T3.Func(new Four());

            var e = new Five();
            T4.Func(new Five());
            T4.Func(new Five());
            T4.Func(new Five());
            T4.Func(new Five());
            T4.Func(new Five());
            T4.Func(new Five());

            var f = new Six();
            T5.Func(new Six());
            T5.Func(new Six());
            T5.Func(new Six());
            T5.Func(new Six());
            T5.Func(new Six());
            T5.Func(new Six());

        }
        [Category("Performance")]
        public class T0 : PerfTest<T0>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.One);
                _counter.Increment();
            }
        }
        [Category("Performance")]
        public class T1 : PerfTest<T1>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.Two);
                _counter.Increment();
            }
        }
        [Category("Performance")]
        public class T2 : PerfTest<T2>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.Three);
                _counter.Increment();
            }
        }
        [Category("Performance")]
        public class T3 : PerfTest<T3>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.Four);
                _counter.Increment();
            }
        }
        [Category("Performance")]
        public class T4 : PerfTest<T4>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.Five);
                _counter.Increment();
            }
        }
        [Category("Performance")]
        public class T5 : PerfTest<T5>
        {
            [OneTimeSetUp]
            public void OneTimeSetUp()
            {
                WarmUpHelper();
            }
            public static string Func(OneOf<PerfFakeBase, One, Two, Three, Four> oo)
            {
                return oo
                .Match(o => o.OneProp)
                .Match(tw => tw.TwoProp)
                .Match(th => th.ThreeProp)
                .Match(f => f.FourProp).
                Match(b => b.Type.ToString());
            }
            private Counter _counter;
            [PerfSetup]
            public void PerfSetup(BenchmarkContext context)
            {
                _counter = context.GetCounter("TestCounter");
            }

            [PerfBenchmark(Description = "Test performance of Matching.", RunMode = RunMode.Throughput, RunTimeMilliseconds = 500, NumberOfIterations = 1, TestMode = TestMode.Test)]
            [CounterTotalAssertion("TestCounter", MustBe.GreaterThanOrEqualTo, 0)]
            [MemoryAssertion(MemoryMetric.TotalBytesAllocated, MustBe.GreaterThanOrEqualTo, 0)]
            [GcTotalAssertion(GcMetric.TotalCollections, GcGeneration.Gen2, MustBe.GreaterThanOrEqualTo, 0)]
            public void Benchmark1(BenchmarkContext c)
            {
                Func(PerfOneOfs.Six);
                _counter.Increment();
            }
        }
    }
}
