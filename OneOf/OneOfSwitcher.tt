<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)OneOf.TemplatingModels\bin\Release\OneOf.TemplatingModels.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="OneOf.TemplatingModels" #>
<#@ output extension=".cs" #>
<#
GenerateClasses();
#>
<#+
void GenerateClasses()
{
	WriteLine("// ===========================================================================");
	WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
	WriteLine("// ===========================================================================");
	WriteLine("");
	WriteLine("using System;");
	
	WriteLine("");
	WriteLine("namespace OneOf");
	using(new WriteBraces(this))
	{
		for (var i = 1; i <= Constants.MaxAritySupported; i++)
			WriteSwitcher(i);
	}
}

void WriteSwitcher(int countOfgenericParams) 
{
	var genericArgs = Helpers.GenerateGenericArgs(Enumerable.Range(1, countOfgenericParams));

	WriteLine("");
	WriteLine($"public struct OneOfSwitcher<{genericArgs}>");
	using(new WriteBraces(this))
	{
		WriteLine("readonly object value;");
		WriteLine("readonly Type valueTn;");
		WriteLine("bool hasSwitched;");

		// =============== Constructors
	    
		WriteLine("");
		WriteLine("internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }");
	    
		WriteLine("");
		WriteLine("internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)");
		using(new WriteBraces(this))
		{
			WriteLine($"this.value = value;");
			WriteLine($"this.valueTn = valueTn;");
			WriteLine($"this.hasSwitched = hasSwitched;");
		}

		// =============== Switch

		for(var parmIndex = 1; parmIndex <= countOfgenericParams; parmIndex++)
		{
			string returnType;
			string returnExpr;

			var lesserArityGenericArgNumbers = Enumerable.Range(1, countOfgenericParams).Where(n => n != parmIndex).ToList();
			if(lesserArityGenericArgNumbers.Count > 0)
			{
				lesserArityGenericArgNumbers.Remove(parmIndex);
				var lesserArityGenericArgs = Helpers.GenerateGenericArgs(lesserArityGenericArgNumbers);

				returnType = $"OneOfSwitcher<{lesserArityGenericArgs}>";
				returnExpr = $"new OneOfSwitcher<{lesserArityGenericArgs}>(value, valueTn, hasSwitched)";
			}
			else
			{
				returnType = $"void";
				returnExpr = $"";
			}

			WriteLine("");
			WriteLine($"public {returnType} Switch(Action<T{parmIndex}> action)");
			using(new WriteBraces(this))
			{
				WriteLine($"if (!hasSwitched && valueTn == typeof(T{parmIndex}))");
				using(new WriteBraces(this))
				{
					WriteLine($"action((T{parmIndex})value);");
					WriteLine("hasSwitched = true;");
				}

				if (returnExpr != "")
					WriteLine($"return {returnExpr};");
			}
		}

		// =============== SwitchWhen

		for(var parmIndex = 1; parmIndex <= countOfgenericParams; parmIndex++)
		{
			WriteLine("");
			WriteLine($"public OneOfSwitcher<{genericArgs}> SwitchWhen(Predicate<T{parmIndex}> condition, Action<T{parmIndex}> action)");
			using(new WriteBraces(this))
			{
				WriteLine($"if (!hasSwitched && valueTn == typeof(T{parmIndex}) && condition((T{parmIndex})value))");
				using(new WriteBraces(this))
				{
					WriteLine($"action((T{parmIndex})value);");
					WriteLine("hasSwitched = true;");
				}

				WriteLine($"return this;");
			}
		}

		// =============== Else

		WriteLine("");
		WriteLine($"public void Else(Action<object> action)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (!hasSwitched) action(value);");
		}

		// =============== ElseThrow

		WriteLine("");
		WriteLine($"public void ElseThrow(Func<object, Exception> func)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (!hasSwitched) throw func(value);");
		}
	}
}
              
class WriteBraces : IDisposable
{
	TextTransformation textTransformation;

	public WriteBraces(TextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}
#>