<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)OneOf.TemplatingModels\bin\Release\OneOf.TemplatingModels.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="OneOf.TemplatingModels" #>
<#@ output extension=".cs" #>
<#
GenerateClasses();
#>
<#+
void GenerateClasses()
{
	WriteLine("// ===========================================================================");
	WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
	WriteLine("// ===========================================================================");
	WriteLine("");
	WriteLine("using System;");
	
	WriteLine("");
	WriteLine("namespace OneOf");
	//todo: Move this to only ever need a single matcher via some sentinal sealed class like Null/None or similar
	using(new WriteBraces(this))
	{
        for (var i = 1; i <= Constants.MaxAritySupported; i++)
		    WriteMatcher(i);
	}
}

void WriteMatcher(int countOfgenericParams) 
{
    var combos = Helpers.CombinationsOfLength1ThroughN(Enumerable.Range(1, countOfgenericParams), countOfgenericParams).Select(c=>c.ToList()).ToList();
    
	var genericArgs = Helpers.GenerateGenericArgs(Enumerable.Range(1, countOfgenericParams)) + ", TResult";

	WriteLine("");
	WriteLine($"public class OneOfMatcher<{genericArgs}> : ");
    var interfaces = new List<string>();
    foreach(var combo in combos)//1
    {   
        var arityArgs = Helpers.GenerateGenericArgs(combo) + ", TResult";
        var arityDisambiguator= Helpers.CreateInterfaceDisambiguator(combo);
        interfaces.Add($"IOneOfMatcher{arityDisambiguator}<{arityArgs}>");
    }
    WriteLine(interfaces[0]);
    foreach(var interf in interfaces.Skip(1))
    {
        Write(",");
        WriteLine(interf);
    }
    
	using(new WriteBraces(this))
	{
		WriteLine("readonly object value;");
		WriteLine("readonly Type valueTn;");
		WriteLine("object result;");
		// =============== Constructors
	    
			    
		WriteLine("");
		WriteLine("internal OneOfMatcher(object value, Type valueTn)");
		using(new WriteBraces(this))
		{
			WriteLine($"this.value = value;");
			WriteLine($"this.valueTn = valueTn;");
		}

		// =============== Match
        foreach(var combo in combos)//1
        {
            var methodDisambiguator =  Helpers.CreateInterfaceDisambiguator(combo);
            var methodGenericArgs = Helpers.GenerateGenericArgs(combo)  + ", TResult";
            foreach(var num in combo)
            {
                var lesserArityGenericArgNumbers = combo.Except(new[]{num}).ToList();
                var lesserArityGenericArg = Helpers.GenerateGenericArgs(lesserArityGenericArgNumbers)  + ", TResult";
                var arityDisambiguator = Helpers.CreateInterfaceDisambiguator(lesserArityGenericArgNumbers);
                var returnType = lesserArityGenericArgNumbers.Count > 0 ? $"IOneOfMatcher{arityDisambiguator}<{lesserArityGenericArg}>" : "TResult";
			    var returnExpr = lesserArityGenericArgNumbers.Count > 0 ?"this" : "(TResult)result";	   
                
                WriteLine($"{returnType} IOneOfMatcher{methodDisambiguator}<{methodGenericArgs}>.Match(Func<T{num}, TResult> createResult)");
			    using(new WriteBraces(this))
			    {
				    WriteLine($"if (result == null && valueTn == typeof(T{num}))");
				    using(new WriteBraces(this))
				    {
					    WriteLine($"result = createResult((T{num})value);");
				    }
				    WriteLine($"return {returnExpr};");
			    }
            }
        }

		// =============== MatchWhen
		var swArityDisambiguator = Helpers.CreateInterfaceDisambiguator(Enumerable.Range(1, countOfgenericParams));
		for(var parmIndex = 1; parmIndex <= countOfgenericParams; parmIndex++)
		{
		    WriteLine("");
			WriteLine($"public OneOfMatcher<{genericArgs}> MatchWhen(Predicate<T{parmIndex}> condition, Func<T{parmIndex}, TResult> createResult)");
			using(new WriteBraces(this))
			{
				WriteLine($"if (result == null && valueTn == typeof(T{parmIndex}) && condition((T{parmIndex})value))");
				using(new WriteBraces(this))
				{
					WriteLine($"result = createResult((T{parmIndex})value);");
				}
				WriteLine($"return this;");
			}
		}

		// =============== Else(default)

		WriteLine("");
		WriteLine($"public TResult Else(TResult defaultValue)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) result = defaultValue;");
			WriteLine("return (TResult)result;");
		}

		// =============== Else(func)

		WriteLine("");
		WriteLine($"public TResult Else(Func<object, TResult> createResult)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) result = createResult(value);");
			WriteLine("return (TResult)result;");
		}

		// =============== ElseThrow

		WriteLine("");
		WriteLine($"public TResult ElseThrow(Func<object, Exception> createException)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) throw createException(value);");
			WriteLine("return (TResult)result;");
		}
	}

}                     
class WriteBraces : IDisposable
{
	TextTransformation textTransformation;

	public WriteBraces(TextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}
#>