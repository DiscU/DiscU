// ===========================================================================
// Generated by OneOf.tt
// ===========================================================================

using System;
using Newtonsoft.Json;

namespace OneOf
{
    public struct OneOf<T0, T1> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1>((T0)value);
            if (value is T1) return new OneOf<T0, T1>((T1)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1>(T0 value) => new OneOf<T0, T1>(value);
        public static implicit operator OneOf<T0, T1>(T1 value) => new OneOf<T0, T1>(value);

        public static bool operator ==(OneOf<T0, T1> v1, OneOf<T0, T1> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1> v1, OneOf<T0, T1> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1>(value, false).Switch(action);
        public OneOfSwitcher<T0> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1>(value, false).Switch(action);

        public OneOfMatcher<T1, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1> && Equals(value, ((OneOf<T0, T1>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2>((T2)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2>(T0 value) => new OneOf<T0, T1, T2>(value);
        public static implicit operator OneOf<T0, T1, T2>(T1 value) => new OneOf<T0, T1, T2>(value);
        public static implicit operator OneOf<T0, T1, T2>(T2 value) => new OneOf<T0, T1, T2>(value);

        public static bool operator ==(OneOf<T0, T1, T2> v1, OneOf<T0, T1, T2> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2> v1, OneOf<T0, T1, T2> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2> && Equals(value, ((OneOf<T0, T1, T2>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3>((T3)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3>(T0 value) => new OneOf<T0, T1, T2, T3>(value);
        public static implicit operator OneOf<T0, T1, T2, T3>(T1 value) => new OneOf<T0, T1, T2, T3>(value);
        public static implicit operator OneOf<T0, T1, T2, T3>(T2 value) => new OneOf<T0, T1, T2, T3>(value);
        public static implicit operator OneOf<T0, T1, T2, T3>(T3 value) => new OneOf<T0, T1, T2, T3>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3> v1, OneOf<T0, T1, T2, T3> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3> v1, OneOf<T0, T1, T2, T3> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3> && Equals(value, ((OneOf<T0, T1, T2, T3>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3, T4> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3, T4> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3, T4>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3, T4>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3, T4>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3, T4>((T3)value);
            if (value is T4) return new OneOf<T0, T1, T2, T3, T4>((T4)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T0 value) => new OneOf<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T1 value) => new OneOf<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T2 value) => new OneOf<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T3 value) => new OneOf<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T4 value) => new OneOf<T0, T1, T2, T3, T4>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3, T4> v1, OneOf<T0, T1, T2, T3, T4> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3, T4> v1, OneOf<T0, T1, T2, T3, T4> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3, T4> && Equals(value, ((OneOf<T0, T1, T2, T3, T4>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3, T4, T5> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3, T4, T5> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3, T4, T5>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3, T4, T5>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3, T4, T5>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3, T4, T5>((T3)value);
            if (value is T4) return new OneOf<T0, T1, T2, T3, T4, T5>((T4)value);
            if (value is T5) return new OneOf<T0, T1, T2, T3, T4, T5>((T5)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3, T4, T5> v1, OneOf<T0, T1, T2, T3, T4, T5> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3, T4, T5> v1, OneOf<T0, T1, T2, T3, T4, T5> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3, T4, T5> && Equals(value, ((OneOf<T0, T1, T2, T3, T4, T5>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T3)value);
            if (value is T4) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T4)value);
            if (value is T5) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T5)value);
            if (value is T6) return new OneOf<T0, T1, T2, T3, T4, T5, T6>((T6)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3, T4, T5, T6> v1, OneOf<T0, T1, T2, T3, T4, T5, T6> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3, T4, T5, T6> v1, OneOf<T0, T1, T2, T3, T4, T5, T6> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3, T4, T5, T6> && Equals(value, ((OneOf<T0, T1, T2, T3, T4, T5, T6>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6, T7> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6, T7> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T3)value);
            if (value is T4) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T4)value);
            if (value is T5) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T5)value);
            if (value is T6) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T6)value);
            if (value is T7) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>((T7)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T7 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3, T4, T5, T6, T7> v1, OneOf<T0, T1, T2, T3, T4, T5, T6, T7> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3, T4, T5, T6, T7> v1, OneOf<T0, T1, T2, T3, T4, T5, T6, T7> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6> Switch(Action<T7> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T7, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3, T4, T5, T6, T7> && Equals(value, ((OneOf<T0, T1, T2, T3, T4, T5, T6, T7>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf
    {
        readonly object value;

        OneOf(object value)
        {
            this.value = value;
        }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> Create(object value)
        {
            if (value is T0) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T0)value);
            if (value is T1) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T1)value);
            if (value is T2) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T2)value);
            if (value is T3) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T3)value);
            if (value is T4) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T4)value);
            if (value is T5) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T5)value);
            if (value is T6) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T6)value);
            if (value is T7) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T7)value);
            if (value is T8) return new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T8)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);

        public static bool operator ==(OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> v2) => v1.Equals(v2);
        public static bool operator !=(OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, T8, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, T8, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, T8, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T8, TResult> Match<TResult>(Func<T7, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T8, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> && Equals(value, ((OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1>((T1)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1>(T0 value) => new OneOfBase<T0, T1>(value);
        public static implicit operator OneOfBase<T0, T1>(T1 value) => new OneOfBase<T0, T1>(value);

        public static bool operator ==(OneOfBase<T0, T1> v1, OneOfBase<T0, T1> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1> v1, OneOfBase<T0, T1> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1>(value, false).Switch(action);
        public OneOfSwitcher<T0> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1>(value, false).Switch(action);

        public OneOfMatcher<T1, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1> && Equals(value, ((OneOfBase<T0, T1>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2>((T2)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2>(T0 value) => new OneOfBase<T0, T1, T2>(value);
        public static implicit operator OneOfBase<T0, T1, T2>(T1 value) => new OneOfBase<T0, T1, T2>(value);
        public static implicit operator OneOfBase<T0, T1, T2>(T2 value) => new OneOfBase<T0, T1, T2>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2> v1, OneOfBase<T0, T1, T2> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2> v1, OneOfBase<T0, T1, T2> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2> && Equals(value, ((OneOfBase<T0, T1, T2>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3>((T3)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3>(T0 value) => new OneOfBase<T0, T1, T2, T3>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T1 value) => new OneOfBase<T0, T1, T2, T3>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T2 value) => new OneOfBase<T0, T1, T2, T3>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T3 value) => new OneOfBase<T0, T1, T2, T3>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3> v1, OneOfBase<T0, T1, T2, T3> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3> v1, OneOfBase<T0, T1, T2, T3> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3> && Equals(value, ((OneOfBase<T0, T1, T2, T3>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3, T4> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3, T4>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3, T4>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3, T4>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3, T4>((T3)value);
            if (value is T4) return new OneOfBase<T0, T1, T2, T3, T4>((T4)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3, T4> v1, OneOfBase<T0, T1, T2, T3, T4> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3, T4> v1, OneOfBase<T0, T1, T2, T3, T4> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3, T4> && Equals(value, ((OneOfBase<T0, T1, T2, T3, T4>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3, T4, T5> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T3)value);
            if (value is T4) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T4)value);
            if (value is T5) return new OneOfBase<T0, T1, T2, T3, T4, T5>((T5)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3, T4, T5> v1, OneOfBase<T0, T1, T2, T3, T4, T5> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3, T4, T5> v1, OneOfBase<T0, T1, T2, T3, T4, T5> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3, T4, T5> && Equals(value, ((OneOfBase<T0, T1, T2, T3, T4, T5>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T3)value);
            if (value is T4) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T4)value);
            if (value is T5) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T5)value);
            if (value is T6) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6>((T6)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3, T4, T5, T6> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3, T4, T5, T6> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6> && Equals(value, ((OneOfBase<T0, T1, T2, T3, T4, T5, T6>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T3)value);
            if (value is T4) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T4)value);
            if (value is T5) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T5)value);
            if (value is T6) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T6)value);
            if (value is T7) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>((T7)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T7 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6> Switch(Action<T7> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T7, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> && Equals(value, ((OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf
    {
        readonly object value;

        OneOfBase(object value)
        {
            this.value = value;
        }

        protected OneOfBase()
        {
            this.value = this;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> Create(object value)
        {
            if (value is T0) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T0)value);
            if (value is T1) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T1)value);
            if (value is T2) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T2)value);
            if (value is T3) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T3)value);
            if (value is T4) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T4)value);
            if (value is T5) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T5)value);
            if (value is T6) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T6)value);
            if (value is T7) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T7)value);
            if (value is T8) return new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>((T8)value);
            throw (value == null) ? new ArgumentNullException(nameof(value)) : new ArgumentException(nameof(value));
        }

        object IOneOf.Value => value;

        public bool Is<T>() => (this.value is T);

        public T As<T>()
        {
            if (this.value is T) return (T)this.value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value);

        public static bool operator ==(OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> v2) => v1.Equals(v2);
        public static bool operator !=(OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> v2) => !v1.Equals(v2);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T0> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);
        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action) => new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, false).Switch(action);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T0, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T1, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T2, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T3, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, T8, TResult> Match<TResult>(Func<T4, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, T8, TResult> Match<TResult>(Func<T5, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, T8, TResult> Match<TResult>(Func<T6, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T8, TResult> Match<TResult>(Func<T7, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);
        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T8, TResult> func)  => new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, null).Match(func);

        public override bool Equals(object obj) => obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> && Equals(value, ((OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>)obj).value);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }

    public struct OneOfSwitcher<T0>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public void Switch(Action<T0> action)
        {
            if (this.value is T0) action((T0)value);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3, T4>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3, T4> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3, T4>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3, T4> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3, T4>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T4> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T4>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3> Switch(Action<T4> action)
        {
            if (this.value is T4)
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3, T4, T5>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3, T4, T5> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3, T4, T5>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3, T4, T5> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3, T4, T5>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T4, T5> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T4, T5>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T5> Switch(Action<T4> action)
        {
            if (this.value is T4)
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T5>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4> Switch(Action<T5> action)
        {
            if (this.value is T5)
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3, T4, T5, T6> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3, T4, T5, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3, T4, T5, T6> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3, T4, T5, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T4, T5, T6> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T4, T5, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T5, T6> Switch(Action<T4> action)
        {
            if (this.value is T4)
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T5, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T6> Switch(Action<T5> action)
        {
            if (this.value is T5)
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T6>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5> Switch(Action<T6> action)
        {
            if (this.value is T6)
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7> Switch(Action<T4> action)
        {
            if (this.value is T4)
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7> Switch(Action<T5> action)
        {
            if (this.value is T5)
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7> Switch(Action<T6> action)
        {
            if (this.value is T6)
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6> Switch(Action<T7> action)
        {
            if (this.value is T7)
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7, T8>
    {
        readonly object value;
        bool hasSwitched;

        internal OneOfSwitcher(object value, bool hasSwitched)
        {
            this.value = value;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T0> action)
        {
            if (this.value is T0)
            {
                action((T0)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action)
        {
            if (this.value is T1)
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T2, T3, T4, T5, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action)
        {
            if (this.value is T2)
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T3, T4, T5, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action)
        {
            if (this.value is T3)
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T4, T5, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action)
        {
            if (this.value is T4)
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T5, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action)
        {
            if (this.value is T5)
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T6, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action)
        {
            if (this.value is T6)
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T7, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action)
        {
            if (this.value is T7)
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T8>(this.value, this.hasSwitched);
        }

        public OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action)
        {
            if (this.value is T8)
            {
                action((T8)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T0, T1, T2, T3, T4, T5, T6, T7>(this.value, this.hasSwitched);
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfMatcher<T0, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }
        public TResult Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return (TResult)result;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, T4, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, T4, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, T4, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, T4, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, T4, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, T4, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T4, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, T4, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, TResult> Match(Func<T4, TResult> createResult)
        {
            if (result == null && value is T4) result = createResult((T4)value);
            return new OneOfMatcher<T0, T1, T2, T3, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, T4, T5, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, T4, T5, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, T4, T5, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, T4, T5, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T4, T5, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, T4, T5, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T5, TResult> Match(Func<T4, TResult> createResult)
        {
            if (result == null && value is T4) result = createResult((T4)value);
            return new OneOfMatcher<T0, T1, T2, T3, T5, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, TResult> Match(Func<T5, TResult> createResult)
        {
            if (result == null && value is T5) result = createResult((T5)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, T4, T5, T6, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, T4, T5, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, T4, T5, T6, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, T4, T5, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T4, T5, T6, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, T4, T5, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T5, T6, TResult> Match(Func<T4, TResult> createResult)
        {
            if (result == null && value is T4) result = createResult((T4)value);
            return new OneOfMatcher<T0, T1, T2, T3, T5, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T6, TResult> Match(Func<T5, TResult> createResult)
        {
            if (result == null && value is T5) result = createResult((T5)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T6, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult> Match(Func<T6, TResult> createResult)
        {
            if (result == null && value is T6) result = createResult((T6)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, TResult> Match(Func<T4, TResult> createResult)
        {
            if (result == null && value is T4) result = createResult((T4)value);
            return new OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, TResult> Match(Func<T5, TResult> createResult)
        {
            if (result == null && value is T5) result = createResult((T5)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, TResult> Match(Func<T6, TResult> createResult)
        {
            if (result == null && value is T6) result = createResult((T6)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult> Match(Func<T7, TResult> createResult)
        {
            if (result == null && value is T7) result = createResult((T7)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }

    public struct OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, T8, TResult>
    {
        readonly object value;
        object result;

        internal OneOfMatcher(object value, object result)
        {
            this.value = value;
            this.result = result;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T0, TResult> createResult)
        {
            if (result == null && value is T0) result = createResult((T0)value);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T1, TResult> createResult)
        {
            if (result == null && value is T1) result = createResult((T1)value);
            return new OneOfMatcher<T0, T2, T3, T4, T5, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T2, TResult> createResult)
        {
            if (result == null && value is T2) result = createResult((T2)value);
            return new OneOfMatcher<T0, T1, T3, T4, T5, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, T8, TResult> Match(Func<T3, TResult> createResult)
        {
            if (result == null && value is T3) result = createResult((T3)value);
            return new OneOfMatcher<T0, T1, T2, T4, T5, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, T8, TResult> Match(Func<T4, TResult> createResult)
        {
            if (result == null && value is T4) result = createResult((T4)value);
            return new OneOfMatcher<T0, T1, T2, T3, T5, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, T8, TResult> Match(Func<T5, TResult> createResult)
        {
            if (result == null && value is T5) result = createResult((T5)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T6, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, T8, TResult> Match(Func<T6, TResult> createResult)
        {
            if (result == null && value is T6) result = createResult((T6)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, T7, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T8, TResult> Match(Func<T7, TResult> createResult)
        {
            if (result == null && value is T7) result = createResult((T7)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T8, TResult>(this.value, this.result);
        }

        public OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult> Match(Func<T8, TResult> createResult)
        {
            if (result == null && value is T8) result = createResult((T8)value);
            return new OneOfMatcher<T0, T1, T2, T3, T4, T5, T6, T7, TResult>(this.value, this.result);
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }
    }
}
