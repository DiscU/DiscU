// ===========================================================================
// Generated by OneOf.tt
// ===========================================================================

using System;
using Newtonsoft.Json;

namespace OneOf
{
    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0>(T0 value) => new OneOf<T0>(value, 0);

        public void Switch(Action<T0> f0 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0>)) return false;

            var other = (OneOf<T0>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1>(T0 value) => new OneOf<T0, T1>(value, 0);
        public static implicit operator OneOf<T0, T1>(T1 value) => new OneOf<T0, T1>(value, 1);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1>)) return false;

            var other = (OneOf<T0, T1>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2>(T0 value) => new OneOf<T0, T1, T2>(value, 0);
        public static implicit operator OneOf<T0, T1, T2>(T1 value) => new OneOf<T0, T1, T2>(value, 1);
        public static implicit operator OneOf<T0, T1, T2>(T2 value) => new OneOf<T0, T1, T2>(value, 2);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2>)) return false;

            var other = (OneOf<T0, T1, T2>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3>(T0 value) => new OneOf<T0, T1, T2, T3>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3>(T1 value) => new OneOf<T0, T1, T2, T3>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3>(T2 value) => new OneOf<T0, T1, T2, T3>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3>(T3 value) => new OneOf<T0, T1, T2, T3>(value, 3);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3>)) return false;

            var other = (OneOf<T0, T1, T2, T3>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3, T4> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3, T4> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T0 value) => new OneOf<T0, T1, T2, T3, T4>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T1 value) => new OneOf<T0, T1, T2, T3, T4>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T2 value) => new OneOf<T0, T1, T2, T3, T4>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T3 value) => new OneOf<T0, T1, T2, T3, T4>(value, 3);
        public static implicit operator OneOf<T0, T1, T2, T3, T4>(T4 value) => new OneOf<T0, T1, T2, T3, T4>(value, 4);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3, T4>)) return false;

            var other = (OneOf<T0, T1, T2, T3, T4>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3, T4, T5> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3, T4, T5> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 3);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 4);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5>(value, 5);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3, T4, T5>)) return false;

            var other = (OneOf<T0, T1, T2, T3, T4, T5>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 3);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 4);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 5);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6>(value, 6);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3, T4, T5, T6>)) return false;

            var other = (OneOf<T0, T1, T2, T3, T4, T5, T6>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6, T7> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6, T7> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
                if (valueType == typeof(T7)) return (T7)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;
            if (this.index == 7 && typeof(T) == typeof(T7)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;
            if (this.index == 7 && typeof(T) == typeof(T7)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 3);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 4);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 5);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 6);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(T7 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7>(value, 7);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action<T7> f7 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }
            if (this.index == 7 && f7 != null) { f7((T7)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<T7, TResult> f7 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);
            if (this.index == 7 && f7 != null) return f7((T7)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3, T4, T5, T6, T7>)) return false;

            var other = (OneOf<T0, T1, T2, T3, T4, T5, T6, T7>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public struct OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOf(object value, int index) { this.value = value; this.index = index; }

        internal static OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
                if (valueType == typeof(T7)) return (T7)value;
                if (valueType == typeof(T8)) return (T8)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;
            if (this.index == 7 && typeof(T) == typeof(T7)) return true;
            if (this.index == 8 && typeof(T) == typeof(T8)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;
            if (this.index == 7 && typeof(T) == typeof(T7)) return (T)value;
            if (this.index == 8 && typeof(T) == typeof(T8)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOf<N0> ToOneOf<N0>() => OneOf<N0>.Create(value);
        public OneOf<N0, N1> ToOneOf<N0, N1>() => OneOf<N0, N1>.Create(value);
        public OneOf<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOf<N0, N1, N2>.Create(value);
        public OneOf<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOf<N0, N1, N2, N3>.Create(value);
        public OneOf<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOf<N0, N1, N2, N3, N4>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOf<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOf<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T0 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 0);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 1);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 2);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 3);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 4);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 5);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 6);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 7);
        public static implicit operator OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 8);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action<T7> f7 = null, Action<T8> f8 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }
            if (this.index == 7 && f7 != null) { f7((T7)this.value); return; }
            if (this.index == 8 && f8 != null) { f8((T8)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<T7, TResult> f7 = null, Func<T8, TResult> f8 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);
            if (this.index == 7 && f7 != null) return f7((T7)this.value);
            if (this.index == 8 && f8 != null) return f8((T8)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>)) return false;

            var other = (OneOf<T0, T1, T2, T3, T4, T5, T6, T7, T8>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
        }

        internal static OneOfBase<T0> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0>(T0 value) => new OneOfBase<T0>(value, 0);

        public void Switch(Action<T0> f0 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0>)) return false;

            var other = (OneOfBase<T0>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
        }

        internal static OneOfBase<T0, T1> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1>(T0 value) => new OneOfBase<T0, T1>(value, 0);
        public static implicit operator OneOfBase<T0, T1>(T1 value) => new OneOfBase<T0, T1>(value, 1);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1>)) return false;

            var other = (OneOfBase<T0, T1>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
        }

        internal static OneOfBase<T0, T1, T2> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2>(T0 value) => new OneOfBase<T0, T1, T2>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2>(T1 value) => new OneOfBase<T0, T1, T2>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2>(T2 value) => new OneOfBase<T0, T1, T2>(value, 2);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2>)) return false;

            var other = (OneOfBase<T0, T1, T2>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
        }

        internal static OneOfBase<T0, T1, T2, T3> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3>(T0 value) => new OneOfBase<T0, T1, T2, T3>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T1 value) => new OneOfBase<T0, T1, T2, T3>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T2 value) => new OneOfBase<T0, T1, T2, T3>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3>(T3 value) => new OneOfBase<T0, T1, T2, T3>(value, 3);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3, T4> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
            if (this is T4) this.index = 4;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4>(value, 3);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4>(value, 4);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3, T4>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3, T4>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3, T4, T5> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
            if (this is T4) this.index = 4;
            if (this is T5) this.index = 5;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 3);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 4);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5>(value, 5);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3, T4, T5>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3, T4, T5>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
            if (this is T4) this.index = 4;
            if (this is T5) this.index = 5;
            if (this is T6) this.index = 6;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 3);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 4);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 5);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6>(value, 6);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3, T4, T5, T6>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
            if (this is T4) this.index = 4;
            if (this is T5) this.index = 5;
            if (this is T6) this.index = 6;
            if (this is T7) this.index = 7;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
                if (valueType == typeof(T7)) return (T7)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;
            if (this.index == 7 && typeof(T) == typeof(T7)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;
            if (this.index == 7 && typeof(T) == typeof(T7)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 3);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 4);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 5);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 6);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(T7 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>(value, 7);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action<T7> f7 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }
            if (this.index == 7 && f7 != null) { f7((T7)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<T7, TResult> f7 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);
            if (this.index == 7 && f7 != null) return f7((T7)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

    [JsonConverter(typeof(OneOfJsonConverter))]
    public class OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf
    {
        readonly object value;
        readonly int index;

        OneOfBase(object value, int index) { this.value = value; this.index = index; }

        protected OneOfBase()
        {
            this.value = this;

            if (this is T0) this.index = 0;
            if (this is T1) this.index = 1;
            if (this is T2) this.index = 2;
            if (this is T3) this.index = 3;
            if (this is T4) this.index = 4;
            if (this is T5) this.index = 5;
            if (this is T6) this.index = 6;
            if (this is T7) this.index = 7;
            if (this is T8) this.index = 8;
        }

        internal static OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8> Create(object value)
        {
            if (value != null)
            {
                var valueType = value.GetType();
                if (valueType == typeof(T0)) return (T0)value;
                if (valueType == typeof(T1)) return (T1)value;
                if (valueType == typeof(T2)) return (T2)value;
                if (valueType == typeof(T3)) return (T3)value;
                if (valueType == typeof(T4)) return (T4)value;
                if (valueType == typeof(T5)) return (T5)value;
                if (valueType == typeof(T6)) return (T6)value;
                if (valueType == typeof(T7)) return (T7)value;
                if (valueType == typeof(T8)) return (T8)value;
            }
            throw new InvalidOperationException();
        }

        object IOneOf.Value => value;

        public bool Is<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return true;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return true;
            if (this.index == 1 && typeof(T) == typeof(T1)) return true;
            if (this.index == 2 && typeof(T) == typeof(T2)) return true;
            if (this.index == 3 && typeof(T) == typeof(T3)) return true;
            if (this.index == 4 && typeof(T) == typeof(T4)) return true;
            if (this.index == 5 && typeof(T) == typeof(T5)) return true;
            if (this.index == 6 && typeof(T) == typeof(T6)) return true;
            if (this.index == 7 && typeof(T) == typeof(T7)) return true;
            if (this.index == 8 && typeof(T) == typeof(T8)) return true;

            return false;
        }

        public T As<T>()
        {
            // quick path for when value non-null and correct type
            if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;

            // slower path for when value null, or wrong type
            if (this.index == 0 && typeof(T) == typeof(T0)) return (T)value;
            if (this.index == 1 && typeof(T) == typeof(T1)) return (T)value;
            if (this.index == 2 && typeof(T) == typeof(T2)) return (T)value;
            if (this.index == 3 && typeof(T) == typeof(T3)) return (T)value;
            if (this.index == 4 && typeof(T) == typeof(T4)) return (T)value;
            if (this.index == 5 && typeof(T) == typeof(T5)) return (T)value;
            if (this.index == 6 && typeof(T) == typeof(T6)) return (T)value;
            if (this.index == 7 && typeof(T) == typeof(T7)) return (T)value;
            if (this.index == 8 && typeof(T) == typeof(T8)) return (T)value;

            throw new InvalidOperationException();
        }

        public OneOfBase<N0> ToOneOf<N0>() => OneOfBase<N0>.Create(value);
        public OneOfBase<N0, N1> ToOneOf<N0, N1>() => OneOfBase<N0, N1>.Create(value);
        public OneOfBase<N0, N1, N2> ToOneOf<N0, N1, N2>() => OneOfBase<N0, N1, N2>.Create(value);
        public OneOfBase<N0, N1, N2, N3> ToOneOf<N0, N1, N2, N3>() => OneOfBase<N0, N1, N2, N3>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4> ToOneOf<N0, N1, N2, N3, N4>() => OneOfBase<N0, N1, N2, N3, N4>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5> ToOneOf<N0, N1, N2, N3, N4, N5>() => OneOfBase<N0, N1, N2, N3, N4, N5>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6> ToOneOf<N0, N1, N2, N3, N4, N5, N6>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7>.Create(value);
        public OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N0, N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfBase<N0, N1, N2, N3, N4, N5, N6, N7, N8>.Create(value);

        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T0 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 0);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 1);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 2);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 3);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 4);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 5);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 6);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 7);
        public static implicit operator OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>(value, 8);

        public void Switch(Action<T0> f0 = null, Action<T1> f1 = null, Action<T2> f2 = null, Action<T3> f3 = null, Action<T4> f4 = null, Action<T5> f5 = null, Action<T6> f6 = null, Action<T7> f7 = null, Action<T8> f8 = null, Action otherwise = null)
        {
            if (this.index == 0 && f0 != null) { f0((T0)this.value); return; }
            if (this.index == 1 && f1 != null) { f1((T1)this.value); return; }
            if (this.index == 2 && f2 != null) { f2((T2)this.value); return; }
            if (this.index == 3 && f3 != null) { f3((T3)this.value); return; }
            if (this.index == 4 && f4 != null) { f4((T4)this.value); return; }
            if (this.index == 5 && f5 != null) { f5((T5)this.value); return; }
            if (this.index == 6 && f6 != null) { f6((T6)this.value); return; }
            if (this.index == 7 && f7 != null) { f7((T7)this.value); return; }
            if (this.index == 8 && f8 != null) { f8((T8)this.value); return; }

            if (otherwise != null) { otherwise(); return; }

            throw new InvalidOperationException();
        }

        public TResult Match<TResult>(Func<T0, TResult> f0 = null, Func<T1, TResult> f1 = null, Func<T2, TResult> f2 = null, Func<T3, TResult> f3 = null, Func<T4, TResult> f4 = null, Func<T5, TResult> f5 = null, Func<T6, TResult> f6 = null, Func<T7, TResult> f7 = null, Func<T8, TResult> f8 = null, Func<TResult> otherwise = null)
        {
            if (this.index == 0 && f0 != null) return f0((T0)this.value);
            if (this.index == 1 && f1 != null) return f1((T1)this.value);
            if (this.index == 2 && f2 != null) return f2((T2)this.value);
            if (this.index == 3 && f3 != null) return f3((T3)this.value);
            if (this.index == 4 && f4 != null) return f4((T4)this.value);
            if (this.index == 5 && f5 != null) return f5((T5)this.value);
            if (this.index == 6 && f6 != null) return f6((T6)this.value);
            if (this.index == 7 && f7 != null) return f7((T7)this.value);
            if (this.index == 8 && f8 != null) return f8((T8)this.value);

            if (otherwise != null) return otherwise();

            throw new InvalidOperationException();
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (!(obj is OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>)) return false;

            var other = (OneOfBase<T0, T1, T2, T3, T4, T5, T6, T7, T8>)obj;
            return index == other.index && Equals(value, other.value);
        }

        public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);

        public override string ToString() => (value?.ToString() ?? "");
    }

}
