// ===========================================================================
// Generated by OneOf.tt
// ===========================================================================

using System;

namespace OneOf
{
    public struct OneOf<T1, T2> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2> ToOneOf<N1, N2>() => OneOfFactory<OneOf<N1, N2>>.Create(value);
        public OneOf<N1, N2, N3> ToOneOf<N1, N2, N3>() => OneOfFactory<OneOf<N1, N2, N3>>.Create(value);
        public OneOf<N1, N2, N3, N4> ToOneOf<N1, N2, N3, N4>() => OneOfFactory<OneOf<N1, N2, N3, N4>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5> ToOneOf<N1, N2, N3, N4, N5>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6> ToOneOf<N1, N2, N3, N4, N5, N6>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2>(T1 value) => OneOfFactory<OneOf<T1, T2>>.Create(value);
        public static implicit operator OneOf<T1, T2>(T2 value) => OneOfFactory<OneOf<T1, T2>>.Create(value);

        public static bool operator ==(OneOf<T1, T2> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2>(this).Switch(action);
        public OneOfSwitcher<T1> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2>(this).Switch(action);

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3> ToOneOf<N1, N2, N3>() => OneOfFactory<OneOf<N1, N2, N3>>.Create(value);
        public OneOf<N1, N2, N3, N4> ToOneOf<N1, N2, N3, N4>() => OneOfFactory<OneOf<N1, N2, N3, N4>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5> ToOneOf<N1, N2, N3, N4, N5>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6> ToOneOf<N1, N2, N3, N4, N5, N6>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3>(T1 value) => OneOfFactory<OneOf<T1, T2, T3>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3>(T2 value) => OneOfFactory<OneOf<T1, T2, T3>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3>(T3 value) => OneOfFactory<OneOf<T1, T2, T3>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3>(this).Switch(action);
        public OneOfSwitcher<T1, T3> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3>(this).Switch(action);
        public OneOfSwitcher<T1, T2> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4> ToOneOf<N1, N2, N3, N4>() => OneOfFactory<OneOf<N1, N2, N3, N4>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5> ToOneOf<N1, N2, N3, N4, N5>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6> ToOneOf<N1, N2, N3, N4, N5, N6>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4, T5> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4, N5> ToOneOf<N1, N2, N3, N4, N5>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6> ToOneOf<N1, N2, N3, N4, N5, N6>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T5 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, T5 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, T5 v2) => !Equals(v1, v2);
        public static bool operator ==(T5 v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v2, v1);
        public static bool operator !=(T5 v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4, T5> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4, T5, T6> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4, N5, N6> ToOneOf<N1, N2, N3, N4, N5, N6>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T5 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T6 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T5 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T5 v2) => !Equals(v1, v2);
        public static bool operator ==(T5 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T5 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, T6 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, T6 v2) => !Equals(v1, v2);
        public static bool operator ==(T6 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v2, v1);
        public static bool operator !=(T6 v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4, T5, T6> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4, T5, T6, T7> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4, N5, N6, N7> ToOneOf<N1, N2, N3, N4, N5, N6, N7>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T5 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T6 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T7 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T5 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T5 v2) => !Equals(v1, v2);
        public static bool operator ==(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T6 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T6 v2) => !Equals(v1, v2);
        public static bool operator ==(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T7 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, T7 v2) => !Equals(v1, v2);
        public static bool operator ==(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v2, v1);
        public static bool operator !=(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8>>.Create(value);
        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T5 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T5 v2) => !Equals(v1, v2);
        public static bool operator ==(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T6 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T6 v2) => !Equals(v1, v2);
        public static bool operator ==(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T7 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T7 v2) => !Equals(v1, v2);
        public static bool operator ==(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T8 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, T8 v2) => !Equals(v1, v2);
        public static bool operator ==(T8 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v2, v1);
        public static bool operator !=(T8 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T8> condition, Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T8> condition, Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }
    public struct OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IOneOf
    {
        private readonly object value;
        private readonly Type origType;

        OneOf(object value, Type origType)
        {
            this.value = value;
            this.origType = origType;
        }

        object IOneOf.Value => value;
        Type IOneOf.OrigType => origType;

        public OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9> ToOneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>() => OneOfFactory<OneOf<N1, N2, N3, N4, N5, N6, N7, N8, N9>>.Create(value);

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T2 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T3 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T4 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T5 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T6 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T7 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T8 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T9 value) => OneOfFactory<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>.Create(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, IOneOf v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, IOneOf v2) => !Equals(v1, v2);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T1 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T1 v2) => !Equals(v1, v2);
        public static bool operator ==(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T1 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T2 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T2 v2) => !Equals(v1, v2);
        public static bool operator ==(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T2 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T3 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T3 v2) => !Equals(v1, v2);
        public static bool operator ==(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T3 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T4 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T4 v2) => !Equals(v1, v2);
        public static bool operator ==(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T4 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T5 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T5 v2) => !Equals(v1, v2);
        public static bool operator ==(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T5 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T6 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T6 v2) => !Equals(v1, v2);
        public static bool operator ==(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T6 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T7 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T7 v2) => !Equals(v1, v2);
        public static bool operator ==(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T7 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T8 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T8 v2) => !Equals(v1, v2);
        public static bool operator ==(T8 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T8 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);
        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T9 v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, T9 v2) => !Equals(v1, v2);
        public static bool operator ==(T9 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v2, v1);
        public static bool operator !=(T9 v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v2, v1);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9> Switch(Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T9> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T8> condition, Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T9> condition, Action<T9> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult> Match<TResult>(Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T9, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T8> condition, Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T9> condition, Func<T9, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);
        public override int GetHashCode() => (value?.GetHashCode() ?? 0);
        public override string ToString() => (value?.ToString() ?? "");
    }

    public struct OneOfSwitcher<T1>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public void Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
        }

        public OneOfSwitcher<T1> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action)
        {
            SwitchImpl<T8>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            SwitchImpl<T8>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        readonly IOneOf oneOf;
        bool hasSwitched;

        internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }

        internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)
        {
            this.oneOf = oneOf;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9> Switch(Action<T8> action)
        {
            SwitchImpl<T8>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T9> action)
        {
            SwitchImpl<T9>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(oneOf, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            SwitchImpl<T8>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T9> condition, Action<T9> action)
        {
            SwitchImpl<T9>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(oneOf.Value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(oneOf.Value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            action((T)oneOf.Value);                  // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfMatcher<T1, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public TResult Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return (TResult)result;
        }

        public OneOfMatcher<T1, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match(Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T8> condition, Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
    {
        readonly IOneOf oneOf;
        object result;

        internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }

        internal OneOfMatcher(IOneOf oneOf, object result)
        {
            this.oneOf = oneOf;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult> Match(Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T9, TResult> createResult)
        {
            MatchImpl<T9>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(oneOf, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T8> condition, Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T9> condition, Func<T9, TResult> createResult)
        {
            MatchImpl<T9>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(oneOf.Value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(oneOf.Value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (oneOf.OrigType != typeof(T)) return; // not correct type
            if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition

            result = createResult((T)oneOf.Value);   // yes!
        }
    }
}
