// ===========================================================================
// Generated by OneOf.tt
// ===========================================================================

using System;

namespace OneOf
{
    public class OneOf<T1, T2> : OneOfBase<OneOf<T1, T2>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2>(T1 value) => new OneOf<T1, T2>(value);
        public static implicit operator OneOf<T1, T2>(T2 value) => new OneOf<T1, T2>(value);

        public static bool operator ==(OneOf<T1, T2> v1, OneOf<T1, T2> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2> v1, OneOf<T1, T2> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2>) && Equals(this.Value, ((OneOf<T1, T2>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3> : OneOfBase<OneOf<T1, T2, T3>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3>(T1 value) => new OneOf<T1, T2, T3>(value);
        public static implicit operator OneOf<T1, T2, T3>(T2 value) => new OneOf<T1, T2, T3>(value);
        public static implicit operator OneOf<T1, T2, T3>(T3 value) => new OneOf<T1, T2, T3>(value);

        public static bool operator ==(OneOf<T1, T2, T3> v1, OneOf<T1, T2, T3> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3> v1, OneOf<T1, T2, T3> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3>) && Equals(this.Value, ((OneOf<T1, T2, T3>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4> : OneOfBase<OneOf<T1, T2, T3, T4>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4>(T1 value) => new OneOf<T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T2 value) => new OneOf<T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T3 value) => new OneOf<T1, T2, T3, T4>(value);
        public static implicit operator OneOf<T1, T2, T3, T4>(T4 value) => new OneOf<T1, T2, T3, T4>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4> v1, OneOf<T1, T2, T3, T4> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4> v1, OneOf<T1, T2, T3, T4> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4, T5> : OneOfBase<OneOf<T1, T2, T3, T4, T5>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T1 value) => new OneOf<T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T2 value) => new OneOf<T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T3 value) => new OneOf<T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T4 value) => new OneOf<T1, T2, T3, T4, T5>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5>(T5 value) => new OneOf<T1, T2, T3, T4, T5>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5> v1, OneOf<T1, T2, T3, T4, T5> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5> v1, OneOf<T1, T2, T3, T4, T5> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4, T5> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4, T5>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4, T5>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4, T5, T6> : OneOfBase<OneOf<T1, T2, T3, T4, T5, T6>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T1 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T2 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T3 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T4 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T5 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T6 value) => new OneOf<T1, T2, T3, T4, T5, T6>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> v1, OneOf<T1, T2, T3, T4, T5, T6> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4, T5, T6> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4, T5, T6>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4, T5, T6>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4, T5, T6, T7> : OneOfBase<OneOf<T1, T2, T3, T4, T5, T6, T7>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T1 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T2 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T3 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T4 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T5 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T6 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T7 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> v1, OneOf<T1, T2, T3, T4, T5, T6, T7> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4, T5, T6, T7>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4, T5, T6, T7>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4, T5, T6, T7, T8> : OneOfBase<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T8> condition, Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match<TResult>(Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen<TResult>(Predicate<T8> condition, Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4, T5, T6, T7, T8>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }
    public class OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> : OneOfBase<OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
    {
        public OneOf(object value) : base(value) { }

        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T2 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T3 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T4 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T5 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T6 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T7 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T8 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T9 value) => new OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);

        public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => Equals(v1, v2);
        public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v1, OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9> v2) => !Equals(v1, v2);

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9> Switch(Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9> Switch(Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9> Switch(Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9> Switch(Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9> Switch(Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9> Switch(Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T9> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).Switch(action);

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T1> condition, Action<T1> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T2> condition, Action<T2> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T3> condition, Action<T3> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T4> condition, Action<T4> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T5> condition, Action<T5> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T6> condition, Action<T6> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T7> condition, Action<T7> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T8> condition, Action<T8> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);
        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T9> condition, Action<T9> action) => new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Value, ValueTn).SwitchWhen(condition, action);

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult> Match<TResult>(Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult> Match<TResult>(Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult> Match<TResult>(Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult> Match<TResult>(Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult> Match<TResult>(Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match<TResult>(Func<T9, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).Match(calcResult);

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T1> condition, Func<T1, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T2> condition, Func<T2, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T3> condition, Func<T3, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T4> condition, Func<T4, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T5> condition, Func<T5, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T6> condition, Func<T6, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T7> condition, Func<T7, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T8> condition, Func<T8, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);
        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen<TResult>(Predicate<T9> condition, Func<T9, TResult> calcResult) => new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Value, ValueTn).MatchWhen(condition, calcResult);

        public override bool Equals(object obj) => (obj is OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>) && Equals(this.Value, ((OneOf<T1, T2, T3, T4, T5, T6, T7, T8, T9>)obj).Value);
        public override int GetHashCode() => (this.Value?.GetHashCode() ?? 0);
        public override string ToString() => (this.Value?.ToString() ?? "");
    }

    public struct OneOfSwitcher<T1>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public void Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
        }

        public OneOfSwitcher<T1> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action)
        {
            SwitchImpl<T8>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            SwitchImpl<T8>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T1> action)
        {
            SwitchImpl<T1>(null, action);
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T2> action)
        {
            SwitchImpl<T2>(null, action);
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9> Switch(Action<T3> action)
        {
            SwitchImpl<T3>(null, action);
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9> Switch(Action<T4> action)
        {
            SwitchImpl<T4>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9> Switch(Action<T5> action)
        {
            SwitchImpl<T5>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9> Switch(Action<T6> action)
        {
            SwitchImpl<T6>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9> Switch(Action<T7> action)
        {
            SwitchImpl<T7>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9> Switch(Action<T8> action)
        {
            SwitchImpl<T8>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T9> action)
        {
            SwitchImpl<T9>(null, action);
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            SwitchImpl<T1>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            SwitchImpl<T2>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            SwitchImpl<T3>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            SwitchImpl<T4>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            SwitchImpl<T5>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            SwitchImpl<T6>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            SwitchImpl<T7>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            SwitchImpl<T8>(condition, action);
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T9> condition, Action<T9> action)
        {
            SwitchImpl<T9>(condition, action);
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }

        void SwitchImpl<T>(Predicate<T> condition, Action<T> action)
        {
            if (hasSwitched) return;                 // already switched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            action((T)value);                        // yes!
            hasSwitched = true;
        }
    }

    public struct OneOfMatcher<T1, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public TResult Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return (TResult)result;
        }

        public OneOfMatcher<T1, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult> Match(Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> MatchWhen(Predicate<T8> condition, Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }

    public struct OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
    {
        readonly object value;
        readonly Type valueTn;
        object result;

        internal OneOfMatcher(object value, Type valueTn) : this(value, valueTn, null) { }

        internal OneOfMatcher(object value, Type valueTn, object result)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.result = result;
        }

        public OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(null, createResult);
            return new OneOfMatcher<T2, T3, T4, T5, T6, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(null, createResult);
            return new OneOfMatcher<T1, T3, T4, T5, T6, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult> Match(Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(null, createResult);
            return new OneOfMatcher<T1, T2, T4, T5, T6, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult> Match(Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T5, T6, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult> Match(Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T6, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult> Match(Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T7, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult> Match(Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T8, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult> Match(Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T9, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Match(Func<T9, TResult> createResult)
        {
            MatchImpl<T9>(null, createResult);
            return new OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(value, valueTn, result);
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T1> condition, Func<T1, TResult> createResult)
        {
            MatchImpl<T1>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T2> condition, Func<T2, TResult> createResult)
        {
            MatchImpl<T2>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T3> condition, Func<T3, TResult> createResult)
        {
            MatchImpl<T3>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T4> condition, Func<T4, TResult> createResult)
        {
            MatchImpl<T4>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T5> condition, Func<T5, TResult> createResult)
        {
            MatchImpl<T5>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T6> condition, Func<T6, TResult> createResult)
        {
            MatchImpl<T6>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T7> condition, Func<T7, TResult> createResult)
        {
            MatchImpl<T7>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T8> condition, Func<T8, TResult> createResult)
        {
            MatchImpl<T8>(condition, createResult);
            return this;
        }

        public OneOfMatcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> MatchWhen(Predicate<T9> condition, Func<T9, TResult> createResult)
        {
            MatchImpl<T9>(condition, createResult);
            return this;
        }

        public TResult Else(TResult defaultValue)
        {
            if (result == null) result = defaultValue;
            return (TResult)result;
        }

        public TResult Else(Func<object, TResult> createResult)
        {
            if (result == null) result = createResult(value);
            return (TResult)result;
        }

        public TResult ElseThrow(Func<object, Exception> createException)
        {
            if (result == null) throw createException(value);
            return (TResult)result;
        }

        void MatchImpl<T>(Predicate<T> condition, Func<T, TResult> createResult)
        {
            if (result != null) return;              // already matched

            if (valueTn != typeof(T)) return;        // not correct type
            if (condition != null && !condition((T)value)) return;  // failed condition

            result = createResult((T)value);         // yes!
        }
    }
}
