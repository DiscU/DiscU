// ===========================================================================
// Generated by OneOfSwitcher.tt
// ===========================================================================

using System;

namespace OneOf
{

    public struct OneOfSwitcher<T1>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public void Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
        }

        public OneOfSwitcher<T1> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5> Switch(Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6) && condition((T6)value))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7> Switch(Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6> Switch(Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6) && condition((T6)value))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7) && condition((T7)value))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8> Switch(Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8> Switch(Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7> Switch(Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6) && condition((T6)value))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7) && condition((T7)value))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8) && condition((T8)value))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9> Switch(Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9> Switch(Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9> Switch(Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8> Switch(Action<T9> action)
        {
            if (!hasSwitched && valueTn == typeof(T9))
            {
                action((T9)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6) && condition((T6)value))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7) && condition((T7)value))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8) && condition((T8)value))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> SwitchWhen(Predicate<T9> condition, Action<T9> action)
        {
            if (!hasSwitched && valueTn == typeof(T9) && condition((T9)value))
            {
                action((T9)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }

    public struct OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        readonly object value;
        readonly Type valueTn;
        bool hasSwitched;

        internal OneOfSwitcher(object value, Type valueTn) : this(value, valueTn, false) { }

        internal OneOfSwitcher(object value, Type valueTn, bool hasSwitched)
        {
            this.value = value;
            this.valueTn = valueTn;
            this.hasSwitched = hasSwitched;
        }

        public OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9, T10> Switch(Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T2, T3, T4, T5, T6, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9, T10> Switch(Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T3, T4, T5, T6, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9, T10> Switch(Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T4, T5, T6, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9, T10> Switch(Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T5, T6, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9, T10> Switch(Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T6, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9, T10> Switch(Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T7, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9, T10> Switch(Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T8, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9, T10> Switch(Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T9, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T10> Switch(Action<T9> action)
        {
            if (!hasSwitched && valueTn == typeof(T9))
            {
                action((T9)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T10>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9> Switch(Action<T10> action)
        {
            if (!hasSwitched && valueTn == typeof(T10))
            {
                action((T10)value);
                hasSwitched = true;
            }
            return new OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value, valueTn, hasSwitched);
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T1> condition, Action<T1> action)
        {
            if (!hasSwitched && valueTn == typeof(T1) && condition((T1)value))
            {
                action((T1)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T2> condition, Action<T2> action)
        {
            if (!hasSwitched && valueTn == typeof(T2) && condition((T2)value))
            {
                action((T2)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T3> condition, Action<T3> action)
        {
            if (!hasSwitched && valueTn == typeof(T3) && condition((T3)value))
            {
                action((T3)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T4> condition, Action<T4> action)
        {
            if (!hasSwitched && valueTn == typeof(T4) && condition((T4)value))
            {
                action((T4)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T5> condition, Action<T5> action)
        {
            if (!hasSwitched && valueTn == typeof(T5) && condition((T5)value))
            {
                action((T5)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T6> condition, Action<T6> action)
        {
            if (!hasSwitched && valueTn == typeof(T6) && condition((T6)value))
            {
                action((T6)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T7> condition, Action<T7> action)
        {
            if (!hasSwitched && valueTn == typeof(T7) && condition((T7)value))
            {
                action((T7)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T8> condition, Action<T8> action)
        {
            if (!hasSwitched && valueTn == typeof(T8) && condition((T8)value))
            {
                action((T8)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T9> condition, Action<T9> action)
        {
            if (!hasSwitched && valueTn == typeof(T9) && condition((T9)value))
            {
                action((T9)value);
                hasSwitched = true;
            }
            return this;
        }

        public OneOfSwitcher<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SwitchWhen(Predicate<T10> condition, Action<T10> action)
        {
            if (!hasSwitched && valueTn == typeof(T10) && condition((T10)value))
            {
                action((T10)value);
                hasSwitched = true;
            }
            return this;
        }

        public void Else(Action<object> action)
        {
            if (!hasSwitched) action(value);
        }

        public void ElseThrow(Func<object, Exception> func)
        {
            if (!hasSwitched) throw func(value);
        }
    }
}
