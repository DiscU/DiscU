<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# GenerateClasses(); #>
<#+
void GenerateClasses()
{
	WriteFileStart();

	for (var i = 1; i < 10; i++)
		WriteType("OneOf", true, i);

	for (var i = 1; i < 10; i++)
		WriteType("OneOfBase", false, i);

	WriteFileEnd();
}

void WriteFileStart()
{
	WriteLine(@"// ===========================================================================");
	WriteLine(@"// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
	WriteLine(@"// ===========================================================================");
	WriteLine(@"");
	WriteLine(@"namespace OneOf");
	WriteLine(@"{");
	PushIndent("    ");

	WriteLine(@"using System;");
	WriteLine(@"using Newtonsoft.Json;");
}

void WriteFileEnd()
{
	PopIndent();
	WriteLine(@"}");
}

void WriteType(string typeName, bool isStruct, int countOfgenericParams) 
{
	var genericArg = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "T" + e));

	WriteLine(@"");
    WriteLine(@"[JsonConverter(typeof(OneOfJsonConverter))]");
	WriteLine(@"public {2} {0}<{1}> : IOneOf", typeName, genericArg, isStruct ? "struct" : "class");
    WriteLine(@"{");
	PushIndent("    ");
	{
		WriteLine(@"readonly object value;");
		WriteLine(@"readonly int index;");
		WriteLine(@"");
	    
		WriteLine(@"{0}(object value, int index) {{ this.value = value; this.index = index; }}", typeName);
		WriteLine(@"");

		if (!isStruct)
		{
			WriteLine(@"protected {0}()", typeName);
			WriteLine(@"{");
			PushIndent("    ");
			{
				WriteLine(@"this.value = this;");
				WriteLine(@"");

				for (var j = 0; j < countOfgenericParams; j++)
				{
					WriteLine(@"if (this is T{0}) this.index = {0};", j);
				}
			}
			PopIndent();
			WriteLine(@"}");
			WriteLine(@"");
		}

		WriteLine(@"object IOneOf.Value => value;");
		WriteLine(@"");

		WriteLine(@"T Get<T>(int index)");
		WriteLine(@"{");
		PushIndent("    ");
		{
			WriteLine(@"if (index != this.index)");
			WriteLine(@"{");
			PushIndent("    ");
			{
				WriteLine(@"throw new InvalidOperationException(""Cannot return as T"" + index + "" as result is T"" + this.index);");
			}
			PopIndent();
			WriteLine(@"}");
			WriteLine(@"return (T)value;");
		}
		PopIndent();
		WriteLine(@"}");
		WriteLine(@"");

		for(var genericParmIndex = 0; genericParmIndex < countOfgenericParams; genericParmIndex ++)
		{
			WriteLine(@"public bool IsT{0} => index == {0};", genericParmIndex);
		}
		WriteLine(@"");

		for(var genericParmIndex = 0; genericParmIndex < countOfgenericParams; genericParmIndex ++)
		{
			WriteLine(@"public T{0} AsT{0} => Get<T{0}>({0});", genericParmIndex); 
		}
		WriteLine(@"");

		for(var genericParmIndex = 0; genericParmIndex < countOfgenericParams; genericParmIndex ++)
		{
			WriteLine(@"public static implicit operator {2}<{1}>(T{0} t) => new {2}<{1}>(t, {0});", genericParmIndex, genericArg, typeName); 
		}
		WriteLine(@"");

		var switchArgList = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "Action<T" + e + "> f" + e + " = null"));
	    WriteLine(@"public void Switch({0}, Action otherwise = null)", switchArgList);
		WriteLine(@"{");
		PushIndent("    ");
		{
			for (var j = 0; j < countOfgenericParams; j++)
			{
				WriteLine(@"if (this.IsT{0} && f{0} != null) {{ f{0}(this.AsT{0}); return; }}", j);
			}

			WriteLine(@"");
		    WriteLine(@"if (otherwise != null) { otherwise(); return; }");

			WriteLine(@"");
			WriteLine(@"throw new InvalidOperationException();");
		}
		PopIndent();
		WriteLine(@"}");
		WriteLine(@"");

		var matchSomeArgList = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "Func<T" + e + ", TResult> f" + e + " = null"));
	    WriteLine(@"public TResult Match<TResult>({0}, Func<TResult> otherwise = null)", matchSomeArgList);
		WriteLine(@"{");
		PushIndent("    ");
		{
			for (var j = 0; j < countOfgenericParams; j++)
			{
				WriteLine(@"if (this.IsT{0} && f{0} != null) return f{0}(this.AsT{0});", j);
			}

			WriteLine(@"");
		    WriteLine(@"if (otherwise != null) return otherwise();");

			WriteLine(@"");
	    	WriteLine(@"throw new InvalidOperationException();");
		}
		PopIndent();
		WriteLine(@"}");
		WriteLine(@"");

		WriteLine(@"public override bool Equals(object obj)");
		WriteLine(@"{");
		PushIndent("    ");
		{
            WriteLine(@"if (ReferenceEquals(null, obj)) return false;");
            WriteLine(@"if (!(obj is {0}<{1}>)) return false;", typeName, genericArg);
			WriteLine(@"");
            WriteLine(@"var other = ({0}<{1}>)obj;", typeName, genericArg);
            WriteLine(@"return index == other.index && Equals(value, other.value);");
		}
		PopIndent();
		WriteLine(@"}");
		WriteLine(@"");

		WriteLine(@"public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);");
		WriteLine(@"");

		WriteLine(@"public override string ToString() => (value?.ToString() ?? """");");

	}
	PopIndent();
	WriteLine(@"}");
}
#>
