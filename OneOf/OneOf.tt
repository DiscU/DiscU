<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<# 
GenerateClasses(); 
#>
<#+
void GenerateClasses()
{
	WriteLine("// ===========================================================================");
	WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
	WriteLine("// ===========================================================================");
	WriteLine("");
	WriteLine("using System;");
	WriteLine("using System.Runtime.CompilerServices;");
	
	WriteLine("");
	WriteLine("namespace OneOf");
	using(new WriteBraces(this))
	{
		for (var i = 2; i < 10; i++)
			WriteOneOf(true, i);

		for (var i = 2; i < 10; i++)
			WriteOneOf(false, i);

		for (var i = 1; i < 10; i++)
			WriteSwitcher(i);

		for (var i = 1; i < 10; i++)
			WriteMatcher(i);
	}
}

string GenerateGenericArgs(IEnumerable<int> ints, string typePrefix = "T", string withResult = null)
{
    return string.Join(", ", ints.Select(e => typePrefix + e)) + (withResult != null ? ", " + withResult : "");
}

void WriteOneOf(bool isStruct, int countOfgenericParams) 
{
	var genericArgs = GenerateGenericArgs(Enumerable.Range(0, countOfgenericParams));
	var structOrClass = isStruct ? "struct" : "class";
	var typeName = isStruct ? "OneOf" : "OneOfBase";

	WriteLine($"public {structOrClass} {typeName}<{genericArgs}> : IOneOf");
	using(new WriteBraces(this))
	{
		WriteLine("private readonly object value;");
        WriteLine("private readonly Type origType;");
		
		// =============== Constructors
		// must only be called after value has been validated to be Tn
	    
		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"{typeName}(object value, Type origType)");

		using(new WriteBraces(this))
		{
			WriteLine("this.value = value;");
            WriteLine("this.origType = origType;");

		}

		if (!isStruct)
		{
			WriteLine("");
			WriteLine($"protected {typeName}()");
			using(new WriteBraces(this))
			{
				WriteLine("this.value = this;");
				WriteLine("this.origType = GetType();");
			}
		}
		
	    // =============== IOneOf implementation

		WriteLine("");
		WriteLine("object IOneOf.Value");
		using(new WriteBraces(this))
		{
			WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
			WriteLine("get { return value; }");
		}

		WriteLine("");
		WriteLine("Type IOneOf.OrigType");
		using(new WriteBraces(this))
		{
			WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
			WriteLine("get { return origType; }");
		}

		// =============== ToOneOf

		WriteLine("");
		for (var numberOfGenericsInNew = countOfgenericParams - 1; numberOfGenericsInNew < 9; numberOfGenericsInNew ++)
	    {
	            var nargs = Enumerable.Range(0, numberOfGenericsInNew + 1).Select(e => "N" + e).ToArray();
	            var otherGenericArgs = string.Join(", ", nargs);
	            WriteLine($"public {typeName}<{otherGenericArgs}> ToOneOf<{otherGenericArgs}>() => OneOfFactory<{typeName}<{otherGenericArgs}>>.Create(value);");
	    }

	    // =============== implicit conversion to T
		// While it looks like we could use OneOf ctor directly as we know the value is a Tn, it might be a subclass of tn.
		// So to determine the best Tn to match the value with we need to use the OneOfFactory.

		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			WriteLine($"public static implicit operator {typeName}<{genericArgs}>(T{parmIndex} value) => OneOfFactory<{typeName}<{genericArgs}>>.Create(value);"); 
		}

		// =============== equality operators

		WriteLine("");
		WriteLine($"public static bool operator ==({typeName}<{genericArgs}> v1, IOneOf v2) => Equals(v1, v2);"); 
		WriteLine($"public static bool operator !=({typeName}<{genericArgs}> v1, IOneOf v2) => !Equals(v1, v2);");

		//also adding equality operators to compare to the various Generic types by value
	    for (var i = 0; i < countOfgenericParams; i++)
	    {
			WriteLine($"public static bool operator ==({typeName}<{genericArgs}> v1, T{i} v2) => Equals(v1, v2);"); 
			WriteLine($"public static bool operator !=({typeName}<{genericArgs}> v1, T{i} v2) => !Equals(v1, v2);");
			WriteLine($"public static bool operator ==(T{i} v1, {typeName}<{genericArgs}> v2) => Equals(v2, v1);"); 
			WriteLine($"public static bool operator !=(T{i} v1, {typeName}<{genericArgs}> v2) => !Equals(v2, v1);");
	    }

		// =============== Switch / SwitchWhen

		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			var lesserArityOneOf = Enumerable.Range(0, countOfgenericParams).Where(n => n != parmIndex).ToList();
			var lesserArityGenericArgs = GenerateGenericArgs(lesserArityOneOf);

			WriteLine($"public OneOfSwitcher<{lesserArityGenericArgs}> Switch(Action<T{parmIndex}> action) => new OneOfSwitcher<{genericArgs}>(this).Switch(action);");
		}


		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			WriteLine($"public OneOfSwitcher<{genericArgs}> SwitchWhen(Predicate<T{parmIndex}> condition, Action<T{parmIndex}> action) => new OneOfSwitcher<{genericArgs}>(this).SwitchWhen(condition, action);");
		}

		// =============== Match / MatchWhen

		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			var lesserArityOneOf = Enumerable.Range(0, countOfgenericParams).Where(n => n != parmIndex).ToList();
			var lesserArityGenericArgs = GenerateGenericArgs(lesserArityOneOf);

			WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
			WriteLine($"public OneOfMatcher<{lesserArityGenericArgs}, TResult> Match<TResult>(Func<T{parmIndex}, TResult> calcResult) => new OneOfMatcher<{genericArgs}, TResult>(this).Match(calcResult);");
		}

		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
			WriteLine($"public OneOfMatcher<{genericArgs}, TResult> MatchWhen<TResult>(Predicate<T{parmIndex}> condition, Func<T{parmIndex}, TResult> calcResult) => new OneOfMatcher<{genericArgs}, TResult>(this).MatchWhen(condition, calcResult);");
		}

		// =============== object overrides

		WriteLine("");
		// Returns true if the object is either an IOneOf, or if the value equals the OneOf, rather than only if it is the same kind of OneOf.
		WriteLine($"public override bool Equals(object obj) => (obj is IOneOf) && Equals(value, ((IOneOf)obj).Value) || value.Equals(obj);");
		WriteLine("public override int GetHashCode() => (value?.GetHashCode() ?? origType?.GetHashCode() ?? 0);");
		WriteLine("public override string ToString() => (value?.ToString() ?? \"\");");
	}
}

void WriteSwitcher(int countOfgenericParams) 
{
	var genericArgs = GenerateGenericArgs(Enumerable.Range(0, countOfgenericParams));

	WriteLine("");
	WriteLine($"public struct OneOfSwitcher<{genericArgs}>");
	using(new WriteBraces(this))
	{
		WriteLine("readonly IOneOf oneOf;");
		WriteLine("bool hasSwitched;");

		// =============== Constructors
	    
		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine("internal OneOfSwitcher(IOneOf oneOf) : this(oneOf, false) { }");
	    
		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine("internal OneOfSwitcher(IOneOf oneOf, bool hasSwitched)");
		using(new WriteBraces(this))
		{
			WriteLine($"this.oneOf = oneOf;");
			WriteLine($"this.hasSwitched = hasSwitched;");
		}

		// =============== Switch
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
		{
			var lesserArityGenericArgNumbers = Enumerable.Range(0, countOfgenericParams).ToList();
			if(lesserArityGenericArgNumbers.Count > 1)
			{
				lesserArityGenericArgNumbers.Remove(parmIndex);
				var lesserArityGenericArgs = GenerateGenericArgs(lesserArityGenericArgNumbers);

				WriteLine("");
				WriteLine($"public OneOfSwitcher<{lesserArityGenericArgs}> Switch(Action<T{parmIndex}> action)");
				using(new WriteBraces(this))
				{
					WriteLine($"SwitchIf<T{parmIndex}>(null, action);");
					WriteLine($"return new OneOfSwitcher<{lesserArityGenericArgs}>(oneOf, hasSwitched);");
				}
			}
			else
			{
				WriteLine("");
				WriteLine($"public void Switch(Action<T{parmIndex}> action)");
				using(new WriteBraces(this))
				{
					WriteLine($"SwitchIf<T{parmIndex}>(null, action);");
				}
			}
		}

		// =============== SwitchWhen
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
		{
			WriteLine("");
			WriteLine($"public OneOfSwitcher<{genericArgs}> SwitchWhen(Predicate<T{parmIndex}> condition, Action<T{parmIndex}> action)");
			using(new WriteBraces(this))
			{
				WriteLine($"SwitchIf<T{parmIndex}>(condition, action);");
				WriteLine($"return this;");
			}
		}

		// =============== SwitchIf
		
		WriteLine("");
		//WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine($"void SwitchIf<T>(Predicate<T> condition, Action<T> action)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (hasSwitched) return;                 // already switched");
			WriteLine("");

			WriteLine($"if (oneOf.OrigType != typeof(T)) return; // not correct type");
			WriteLine($"if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition");

			WriteLine("");
			WriteLine($"action((T)oneOf.Value);                  // yes!");
			WriteLine("hasSwitched = true;");
		}

		// =============== Else

		WriteLine("");
		WriteLine($"public void Else(Action<object> action)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (!hasSwitched) action(oneOf.Value);");
		}

		// =============== ElseThrow

		WriteLine("");
		WriteLine($"public void ElseThrow(Func<object, Exception> func)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (!hasSwitched) throw func(oneOf.Value);");
		}
	}
}

void WriteMatcher(int countOfgenericParams) 
{
	var genericArgs = GenerateGenericArgs(Enumerable.Range(0, countOfgenericParams), withResult: "TResult");

	WriteLine("");
	WriteLine($"public struct OneOfMatcher<{genericArgs}>" );
	using(new WriteBraces(this))
	{
		WriteLine("readonly IOneOf oneOf;");
		WriteLine("object result;");

		// =============== Constructors
	    
		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine("internal OneOfMatcher(IOneOf oneOf) : this(oneOf, null) { }");
	    
		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine("internal OneOfMatcher(IOneOf oneOf, object result)");
		using(new WriteBraces(this))
		{
			WriteLine($"this.oneOf = oneOf;");
			WriteLine($"this.result = result;");
		}

		// =============== Match

		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
		{
			var lesserArityGenericArgNumbers = Enumerable.Range(0, countOfgenericParams).ToList();
			if(lesserArityGenericArgNumbers.Count > 1)
			{
				lesserArityGenericArgNumbers.Remove(parmIndex);
				var lesserArityGenericArgs = GenerateGenericArgs(lesserArityGenericArgNumbers, withResult: "TResult");

				WriteLine("");
				WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
				WriteLine($"public OneOfMatcher<{lesserArityGenericArgs}> Match(Func<T{parmIndex}, TResult> createResult)");
				using(new WriteBraces(this))
				{
					WriteLine($"MatchIf<T{parmIndex}>(null, createResult);");
					WriteLine($"return new OneOfMatcher<{lesserArityGenericArgs}>(oneOf, result);");
				}
			}
			else
            {
				WriteLine("");
				//WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
				WriteLine($"public TResult Match(Func<T{parmIndex}, TResult> createResult)");
				using(new WriteBraces(this))
				{
					WriteLine($"MatchIf<T{parmIndex}>(null, createResult);");
					WriteLine($"return (TResult)result;");
				}
            }
		}

		// =============== MatchWhen

		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
		{
			WriteLine("");
			WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
			WriteLine($"public OneOfMatcher<{genericArgs}> MatchWhen(Predicate<T{parmIndex}> condition, Func<T{parmIndex}, TResult> createResult)");
			using(new WriteBraces(this))
			{
				WriteLine($"MatchIf<T{parmIndex}>(condition, createResult);");
				WriteLine($"return this;");
			}
		}

		// =============== MatchIf
		
		WriteLine("");
		//WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine($"void MatchIf<T>(Predicate<T> condition, Func<T, TResult> createResult)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result != null) return;              // already matched");
			WriteLine("");

			WriteLine($"if (oneOf.OrigType != typeof(T)) return; // not correct type");
			WriteLine($"if (condition != null && !condition((T)oneOf.Value)) return;  // failed condition");
			WriteLine("");
			WriteLine($"result = createResult((T)oneOf.Value);   // yes!");
		}

		// =============== Else(default)

		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine($"public TResult Else(TResult defaultValue)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) result = defaultValue;");
			WriteLine("return (TResult)result;");
		}

		// =============== Else(func)

		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine($"public TResult Else(Func<object, TResult> createResult)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) result = createResult(oneOf.Value);");
			WriteLine("return (TResult)result;");
		}

		// =============== ElseThrow

		WriteLine("");
		WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
		WriteLine($"public TResult ElseThrow(Func<object, Exception> createException)");
		using(new WriteBraces(this))
		{
			WriteLine($"if (result == null) throw createException(oneOf.Value);");
			WriteLine("return (TResult)result;");
		}
	}
}

class WriteBraces: IDisposable
{
	TextTransformation textTransformation;

	public WriteBraces(TextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}

#>
