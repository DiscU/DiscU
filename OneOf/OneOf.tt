<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
GenerateClasses(); 
#>
<#+
void GenerateClasses()
{
	WriteLine("// ===========================================================================");
	WriteLine("// Generated by {0}", System.IO.Path.GetFileName(Host.TemplateFile));
	WriteLine("// ===========================================================================");
	WriteLine("");
	WriteLine("using System;");
	WriteLine("using Newtonsoft.Json;");
	WriteLine("");
	WriteLine("namespace OneOf");
	using(var indent1 = new Indent(this))
	{
		for (var i = 1; i < 10; i++)
			WriteType("OneOf", true, i);

		for (var i = 1; i < 10; i++)
			WriteType("OneOfBase", false, i);
	}
}

void WriteType(string typeName, bool isStruct, int countOfgenericParams) 
{
	var genericArg = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "T" + e));
	var structOrClass = isStruct ? "struct" : "class";

    WriteLine("[JsonConverter(typeof(OneOfJsonConverter))]");
	WriteLine($"public {structOrClass} {typeName}<{genericArg}> : IOneOf");
	using(var indent1 = new Indent(this))
	{
		WriteLine("readonly object value;");
		WriteLine("readonly int index;");

		// =============== Constructors
	    
		WriteLine("");
		WriteLine($"{typeName}(object value, int index) {{ this.value = value; this.index = index; }}");

		if (!isStruct)
		{
			WriteLine("");
			WriteLine($"protected {typeName}()");
			using(var indent2 = new Indent(this))
			{
				WriteLine("this.value = this;");
				WriteLine("");

				for (var j = 0; j < countOfgenericParams; j++)
				{
					WriteLine($"if (this is T{j}) this.index = {j};");
				}
			}
		}

		// =============== IOneOf implementation

		WriteLine("");
		WriteLine("object IOneOf.Value => value;");

		// =============== Is

		WriteLine("");
		WriteLine($"public bool Is<T>()");
		using(var indent2 = new Indent(this))
		{
			WriteLine("// quick path for when value non-null and correct type");
			WriteLine($"if (this.value != null && this.value.GetType() == typeof(T)) return true;");
			WriteLine("");

			WriteLine("// slower path for when value null, or wrong type");
			for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
			{
				WriteLine($"if (this.index == {parmIndex} && typeof(T) == typeof(T{parmIndex})) return true;");
			}

			WriteLine("");
			WriteLine("return false;");
		}

		// =============== As

		WriteLine("");
		WriteLine($"public T As<T>()");
		using(var indent2 = new Indent(this))
		{
			WriteLine("// quick path for when value non-null and correct type");
			WriteLine($"if (this.value != null && this.value.GetType() == typeof(T)) return (T)this.value;");
			WriteLine("");

			WriteLine("// slower path for when value null, or wrong type");
			for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
			{
				WriteLine($"if (this.index == {parmIndex} && typeof(T) == typeof(T{parmIndex})) return (T)value;");
			}

			WriteLine("");
			WriteLine("throw new InvalidOperationException();");
		}

		// =============== implicit conversion to T

		WriteLine("");
		for(var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex ++)
		{
			WriteLine($"public static implicit operator {typeName}<{genericArg}>(T{parmIndex} t) => new {typeName}<{genericArg}>(t, {parmIndex});"); 
		}

		// =============== Switch

		var switchArgList = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "Action<T" + e + "> f" + e + " = null"));

		WriteLine("");
	    WriteLine($"public void Switch({switchArgList}, Action otherwise = null)");
		using(var indent2 = new Indent(this))
		{
			for (var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
			{
				WriteLine($"if (this.index == {parmIndex} && f{parmIndex} != null) {{ f{parmIndex}((T{parmIndex})this.value); return; }}");
			}

			WriteLine("");
		    WriteLine("if (otherwise != null) { otherwise(); return; }");

			WriteLine("");
			WriteLine("throw new InvalidOperationException();");
		}

		// =============== Match

		var matchArgList = string.Join(", ", Enumerable.Range(0, countOfgenericParams).Select(e => "Func<T" + e + ", TResult> f" + e + " = null"));

		WriteLine("");
	    WriteLine($"public TResult Match<TResult>({matchArgList}, Func<TResult> otherwise = null)");
		using(var indent2 = new Indent(this))
		{
			for (var parmIndex = 0; parmIndex < countOfgenericParams; parmIndex++)
			{
				WriteLine($"if (this.index == {parmIndex} && f{parmIndex} != null) return f{parmIndex}((T{parmIndex})this.value);");
			}

			WriteLine("");
		    WriteLine("if (otherwise != null) return otherwise();");

			WriteLine("");
	    	WriteLine("throw new InvalidOperationException();");
		}

		// =============== object overrides

		WriteLine("");
		WriteLine("public override bool Equals(object obj)");
		using(var indent2 = new Indent(this))
		{
            WriteLine("if (ReferenceEquals(null, obj)) return false;");
            WriteLine($"if (!(obj is {typeName}<{genericArg}>)) return false;");
			WriteLine("");
            WriteLine($"var other = ({typeName}<{genericArg}>)obj;");
            WriteLine("return index == other.index && Equals(value, other.value);");
		}

		WriteLine("");
		WriteLine("public override int GetHashCode() => unchecked((value?.GetHashCode() ?? 0) * 397 ^ index);");

		WriteLine("");
		WriteLine("public override string ToString() => (value?.ToString() ?? \"\");");

	}

	WriteLine("");
}

class Indent: IDisposable
{
	GeneratedTextTransformation textTransformation;

	public Indent(GeneratedTextTransformation textTransformation)
	{
		this.textTransformation = textTransformation;

		textTransformation.WriteLine("{");
		textTransformation.PushIndent("    ");
	}

	public void Dispose()
	{
		textTransformation.PopIndent();
		textTransformation.WriteLine("}");
	}
}

#>
